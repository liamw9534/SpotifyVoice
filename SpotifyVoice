#!/usr/bin/python -B

"""
SpotifyVoice

Voice controlled command-line spotify music player using voice
recognition.

Copyright (c) 2014 All Right Reserved, Liam Wickins

Please see the LICENSE file for more information.

THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY 
KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
PARTICULAR PURPOSE.
"""

from __future__ import division
import sys, time, readline, os, threading, codecs
from optparse import OptionParser
from MusicDB import MusicDB
from SpotifyService import SpotifyService
from MusicOutcome import MusicOutcome
from SpotifySearch import SpotifySearch
from PlayQueue import PlayQueue

parser = OptionParser()
parser.add_option("-u", "--user", dest="user",
                  help="Spotify user name",
                  action="store", type="string")
parser.add_option("-p", "--pass", dest="password",
                  help="Spotify password",
                  action="store", type="string")
parser.add_option("-q", "--quiet", dest="announce",
                  help="Synthesizer announcements are suppressed",
                  action="store_false", default=True)
parser.add_option("-d", "--db", dest="musicDatabase",
                  help="Music database",
                  action="store", type="string")
parser.add_option("-a", "--asr", dest="asrDatabase",
                  help="ASR database for referencing music corpus",
                  action="store", type="string")
parser.add_option("-m", "--model", dest="model",
                  help="ASR model from database to use",
                  action="store", type="string")
parser.add_option("-f", "--fsg", dest="fsg",
                  help="ASR finite state grammar to use",
                  action="store", type="string")
(options, args) = parser.parse_args()

# Required for ASR utilities
sys.path.append("../ASRUtils")

from ASRModel import ASRModel
from ASR import ASR
from ASRGoogleAPI import ASRGoogleAPI

# Required for E-Speak python module
if (options.announce):

  sys.path.append("../espeak.py")
  from TextToSpeech import TextToSpeech

  # Create speech synthesizer
  synth = TextToSpeech()

if (not options.user or not options.password):
  print "You must have a Spotify account and token to use this program."
  exit()

if (not options.asrDatabase or not options.model):
  print "You have not given a local ASR model - only remote will be used"

if (options.fsg):
  print "You are using a finite state grammar:", options.fsg

class MusicASR():

  def __init__(self, database, model, fsg):

    self.asrList = []
    self.asrQueue = []
    self.event = threading.Event()

    # ASR database and language model are optional for command and control
    # Enabling this makes local look-ups happen faster and improves the
    # end-user experience
    if (database and model):
      self.asrModel = ASRModel(database, model)
      self.asrList.append((ASR(self.__AsrCallback,
                               hmm=self.__GetHmm(),
                               lm=self.__GetLm(),
                               dic=self.__GetDict(),
                               fsg=fsg,
                               wordLimit=2, # Restrict commands to two words
                               tag='cmu'), 'cmu'))

    # Remote Google instance should always be enabled, it has a much
    # higher latency than the local ASR but is able to cope with very
    # much more complex utterances more reliably

    self.asrList.append((ASRGoogleAPI(self.__AsrCallback, tag='google', timeout=1), 'google'))

  def __AsrPlay(self):
    for asr,tag in self.asrList:
      asr.Play()

  def __AsrPause(self):
    for asr,tag in self.asrList:
      asr.Pause()

  def __AsrFlush(self):
    for asr,tag in self.asrList:
      asr.Flush()

  def __AsrExit(self):
    for asr,tag in self.asrList:
      asr.Exit()

  def __AsrCallback(self, event, tag, best):
    if (event == 'result'):
      self.asrQueue += best
      self.event.set()   # Wake up pending speech timeout

  def WaitSpeechOutcome(self, timeout=None):

    # Clear queues and enable the ASR engines
    resp = None
    self.asrQueue = []
    self.event.clear()
    self.__AsrPlay()

    # Wait for ASR message or timeout
    while (self.event.wait(timeout)):
      self.event.clear()
      # ASR queue will contain all viable utterances so far, decode them...
      resp = self.__DecodeOutcome(self.asrQueue)
      if (resp): # Returns None if no valid utterance was found
        break    # Good utterance

    # Flush any pending ASR responses in flight
    self.__AsrFlush()

    return resp

  def __DecodeOutcome(self, items):

    # Look at the best entry and quickly check if it's a command
    for s in items:
      p = 1.0  # FIXME: This is a stub for probability
      try:
        #print "Trying:", s
        if (s.startswith('COMMAND ')):
          # Strip off 'COMMAND' prefix since this is merely a 'cue'
          outcome = MusicOutcome(s.lower()[8:], confidence=p)
        else:
          outcome = MusicOutcome(s.lower(), confidence=p)
        #print "Outcome:", outcome
        if (outcome is not None):
          return outcome
      except:
        pass
    return None

  def Exit(self):
    self.__AsrExit()

  def __GetHmm(self):
    return self.asrModel.model

  def __GetLm(self):
    return self.asrModel.lm

  def __GetDict(self):
    return self.asrModel.dict

# Create client session and login
m = SpotifyService()
if (m.LoginUser(options.user, options.password) != 0):
  m.Exit()
  exit("Error: Failed to login to Spotify")

# Initialize our music ASR
asr = MusicASR(options.asrDatabase, options.model, options.fsg)

# Create offline music database connection
if (options.musicDatabase):
  db = MusicDB(options.musicDatabase)
else:
  db = None

trackCount = 0
lastTrackCount = 0
def NewTrackIndication():
  global trackCount
  trackCount += 1

# Create play queue
pq = PlayQueue(m, NewTrackIndication)

def UnicodeToAscii(u):
  table = { 0x2018:0x27, 0x2019:0x27, 0x201C:0x22, 0x201D:0x22 }
  return u.translate(table).encode('ascii', 'ignore')

# Helper function to announce/show current track information
def TrackInfo():
  info = pq.GetCurrentTrackInfo()
  if (info):
    track = info['name']
    artist = m.GetArtistInfo(info['artists'][0])
    artist = artist['name']
    text = UnicodeToAscii("Track : " + track + " : " + artist)
    print text
    if (options.announce):
      synth.SpeakAndWaitUntilFinished(text)

# Main application loop
while True:

  # Wait for ASR command outcome in the form (outcome, probability)
  outcome = asr.WaitSpeechOutcome()

  # Try to gather outcome information
  if (outcome):
    intent = outcome.intent.name
    entities = outcome.entities
    print outcome
  else:
    intent = 'Uknown'
    entities = None

  if intent == 'play' and not entities:
    pq.Play()
    TrackInfo()
    NewTrackIndication()
  elif intent == 'stop':
    pq.Stop()
  elif intent == 'skip':
    pq.SkipForward()
    TrackInfo()
    NewTrackIndication()
  elif intent == 'back':
    pq.SkipBack()
    TrackInfo()
    NewTrackIndication()
  elif ((intent == 'search') or (intent == 'play' and entities) or
        (intent == 'find' and entities)):
    try:
      q = SpotifySearch(entities, m, musicDb=db, offline=False)
      print "Submitting query..."
      results = q.GetQueryResults()
    except:
      print "Was not able to format query", sys.exc_info()[0]
      results = []
    numTracks = len(results)
    print "Search returned", numTracks, "tracks..."
    if (intent == 'play' and numTracks > 0):
      print "Inserted", numTracks, "tracks onto playlist"
      pq.Insert(results)
      pq.Reset()
      pq.Play()
      TrackInfo()
      NewTrackIndication()
    elif (numTracks > 0):
      print "Appended", numTracks, "tracks onto playlist"
      pq.Append(results)
  elif intent == 'reset':
    pq.Reset()
  elif intent == 'pause':
    pq.Pause()
  elif intent == 'resume':
    pq.Resume()
  elif intent == 'clear':
    pq.Clear()
  elif intent == 'info':
    print "Play queue at", pq.QueueIndex(), "with", pq.QueueSize(), "tracks."
    TrackInfo()
  elif intent == 'insert':
    if (search):
      pq.Insert(search)
  elif intent == 'append':
    if (search):
      pq.Append(search)
  elif intent == 'stats':
    stats = m.GetStatistics()
    print "Occupancy:", stats[2], "%", "Dropped:", stats[1]
  elif intent == 'exit' or intent == 'quit':
    break

# Logout and delete session
m.LogoutUser()
m.Exit()
asr.Exit()
